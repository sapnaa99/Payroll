//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BusinessEntities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class PayrollEntities : DbContext
    {
        public PayrollEntities()
            : base("name=PayrollEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Attendance> Attendances { get; set; }
        public DbSet<Client> Clients { get; set; }
        public DbSet<Company> Companies { get; set; }
        public DbSet<Complain> Complains { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<EmployeeInformation> EmployeeInformations { get; set; }
        public DbSet<EmployeeLeave> EmployeeLeaves { get; set; }
        public DbSet<EmployeeLeaveDetail> EmployeeLeaveDetails { get; set; }
        public DbSet<EmployeeSalary> EmployeeSalaries { get; set; }
        public DbSet<Leave> Leaves { get; set; }
        public DbSet<ListItem> ListItems { get; set; }
        public DbSet<ListItemCategory> ListItemCategories { get; set; }
        public DbSet<Plan> Plans { get; set; }
        public DbSet<PlanDuration> PlanDurations { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<SalaryRateSetup> SalaryRateSetups { get; set; }
        public DbSet<SalaryTransaction> SalaryTransactions { get; set; }
        public DbSet<SubDomain> SubDomains { get; set; }
        public DbSet<Subscription> Subscriptions { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<SystemUser> SystemUsers { get; set; }
        public DbSet<SystemUserInformation> SystemUserInformations { get; set; }
        public DbSet<Ticket> Tickets { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<UserInformation> UserInformations { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<VwListItemCategory> VwListItemCategories { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SpClientUserIns(Nullable<int> userId, string userModel, string userInformationModel, Nullable<int> insertUserId, ObjectParameter returnMessage)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userModelParameter = userModel != null ?
                new ObjectParameter("UserModel", userModel) :
                new ObjectParameter("UserModel", typeof(string));
    
            var userInformationModelParameter = userInformationModel != null ?
                new ObjectParameter("UserInformationModel", userInformationModel) :
                new ObjectParameter("UserInformationModel", typeof(string));
    
            var insertUserIdParameter = insertUserId.HasValue ?
                new ObjectParameter("InsertUserId", insertUserId) :
                new ObjectParameter("InsertUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpClientUserIns", userIdParameter, userModelParameter, userInformationModelParameter, insertUserIdParameter, returnMessage);
        }
    
        public virtual int SpCompanyIns(Nullable<int> companyId, string companyName, Nullable<int> userId, ObjectParameter returnMessage)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCompanyIns", companyIdParameter, companyNameParameter, userIdParameter, returnMessage);
        }
    
        public virtual ObjectResult<string> SpCompanySel(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpCompanySel", userIdParameter);
        }
    
        public virtual int SpEmployeeAttendenceIns(Nullable<int> companyId, Nullable<int> employeeId, Nullable<bool> isPresent, Nullable<int> userId, ObjectParameter returnMessage)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var isPresentParameter = isPresent.HasValue ?
                new ObjectParameter("IsPresent", isPresent) :
                new ObjectParameter("IsPresent", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpEmployeeAttendenceIns", companyIdParameter, employeeIdParameter, isPresentParameter, userIdParameter, returnMessage);
        }
    
        public virtual int SpEmployeeAttendenceLogoutIns(Nullable<int> companyId, Nullable<int> attendanceId, ObjectParameter returnMessage)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var attendanceIdParameter = attendanceId.HasValue ?
                new ObjectParameter("AttendanceId", attendanceId) :
                new ObjectParameter("AttendanceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpEmployeeAttendenceLogoutIns", companyIdParameter, attendanceIdParameter, returnMessage);
        }
    
        public virtual ObjectResult<string> SpEmployeeAttendenceSel(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpEmployeeAttendenceSel", companyIdParameter);
        }
    
        public virtual int SpEmployeeIns(string employeeModel, string employeeInformation, string employeeSalary, ObjectParameter returnMessage)
        {
            var employeeModelParameter = employeeModel != null ?
                new ObjectParameter("EmployeeModel", employeeModel) :
                new ObjectParameter("EmployeeModel", typeof(string));
    
            var employeeInformationParameter = employeeInformation != null ?
                new ObjectParameter("EmployeeInformation", employeeInformation) :
                new ObjectParameter("EmployeeInformation", typeof(string));
    
            var employeeSalaryParameter = employeeSalary != null ?
                new ObjectParameter("EmployeeSalary", employeeSalary) :
                new ObjectParameter("EmployeeSalary", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpEmployeeIns", employeeModelParameter, employeeInformationParameter, employeeSalaryParameter, returnMessage);
        }
    
        public virtual int SpEmployeeLeaveAppliedIns(string employeeLeaveModel, ObjectParameter returnMessage)
        {
            var employeeLeaveModelParameter = employeeLeaveModel != null ?
                new ObjectParameter("EmployeeLeaveModel", employeeLeaveModel) :
                new ObjectParameter("EmployeeLeaveModel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpEmployeeLeaveAppliedIns", employeeLeaveModelParameter, returnMessage);
        }
    
        public virtual ObjectResult<string> SpEmployeeLeaveAppliedSel(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpEmployeeLeaveAppliedSel", employeeIdParameter);
        }
    
        public virtual ObjectResult<string> SpEmployeeLeaveSel(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpEmployeeLeaveSel", companyIdParameter);
        }
    
        public virtual int SpEmployeeleaveStatusTsk(string status, Nullable<int> employeeLeaveId, Nullable<int> insertUserId, ObjectParameter returnMessage)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var employeeLeaveIdParameter = employeeLeaveId.HasValue ?
                new ObjectParameter("EmployeeLeaveId", employeeLeaveId) :
                new ObjectParameter("EmployeeLeaveId", typeof(int));
    
            var insertUserIdParameter = insertUserId.HasValue ?
                new ObjectParameter("InsertUserId", insertUserId) :
                new ObjectParameter("InsertUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpEmployeeleaveStatusTsk", statusParameter, employeeLeaveIdParameter, insertUserIdParameter, returnMessage);
        }
    
        public virtual ObjectResult<string> SpEmployeeSalartTransactionSel(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpEmployeeSalartTransactionSel", companyIdParameter);
        }
    
        public virtual ObjectResult<string> SpEmployeeSel(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpEmployeeSel", clientIdParameter);
        }
    
        public virtual int SpLeaveDel(Nullable<int> leaveId, ObjectParameter returnMessage)
        {
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLeaveDel", leaveIdParameter, returnMessage);
        }
    
        public virtual int SpLeaveIns(Nullable<int> companyId, string leaveName, Nullable<int> days, ObjectParameter returnMessage)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var leaveNameParameter = leaveName != null ?
                new ObjectParameter("LeaveName", leaveName) :
                new ObjectParameter("LeaveName", typeof(string));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLeaveIns", companyIdParameter, leaveNameParameter, daysParameter, returnMessage);
        }
    
        public virtual ObjectResult<string> SpLeaveSel(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpLeaveSel", companyIdParameter);
        }
    
        public virtual int SpLeaveUpdate(Nullable<int> leaveId, Nullable<int> companyId, string leaveName, Nullable<int> days, ObjectParameter returnMessage)
        {
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var leaveNameParameter = leaveName != null ?
                new ObjectParameter("LeaveName", leaveName) :
                new ObjectParameter("LeaveName", typeof(string));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLeaveUpdate", leaveIdParameter, companyIdParameter, leaveNameParameter, daysParameter, returnMessage);
        }
    
        public virtual ObjectResult<string> SpListItemCategoryDetailSel(string listItemCategoryName)
        {
            var listItemCategoryNameParameter = listItemCategoryName != null ?
                new ObjectParameter("ListItemCategoryName", listItemCategoryName) :
                new ObjectParameter("ListItemCategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpListItemCategoryDetailSel", listItemCategoryNameParameter);
        }
    
        public virtual ObjectResult<string> SpPlanSel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpPlanSel");
        }
    
        public virtual ObjectResult<string> SpSalaryRateSel(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpSalaryRateSel", clientIdParameter);
        }
    
        public virtual int SpSalaryRateSetupIns(Nullable<int> salaryRateSetupId, Nullable<int> companyId, string rateName, Nullable<int> from, Nullable<int> upto, Nullable<double> rate, Nullable<int> insertUserId, ObjectParameter returnMessage)
        {
            var salaryRateSetupIdParameter = salaryRateSetupId.HasValue ?
                new ObjectParameter("SalaryRateSetupId", salaryRateSetupId) :
                new ObjectParameter("SalaryRateSetupId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var rateNameParameter = rateName != null ?
                new ObjectParameter("RateName", rateName) :
                new ObjectParameter("RateName", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(int));
    
            var uptoParameter = upto.HasValue ?
                new ObjectParameter("Upto", upto) :
                new ObjectParameter("Upto", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var insertUserIdParameter = insertUserId.HasValue ?
                new ObjectParameter("InsertUserId", insertUserId) :
                new ObjectParameter("InsertUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSalaryRateSetupIns", salaryRateSetupIdParameter, companyIdParameter, rateNameParameter, fromParameter, uptoParameter, rateParameter, insertUserIdParameter, returnMessage);
        }
    
        public virtual int SpUserIns(string userModel, string userInformationModel, ObjectParameter returnMessage)
        {
            var userModelParameter = userModel != null ?
                new ObjectParameter("UserModel", userModel) :
                new ObjectParameter("UserModel", typeof(string));
    
            var userInformationModelParameter = userInformationModel != null ?
                new ObjectParameter("UserInformationModel", userInformationModel) :
                new ObjectParameter("UserInformationModel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUserIns", userModelParameter, userInformationModelParameter, returnMessage);
        }
    
        public virtual ObjectResult<SpUserRoleSel_Result> SpUserRoleSel(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpUserRoleSel_Result>("SpUserRoleSel", userIdParameter);
        }
    
        public virtual ObjectResult<string> SpUserSel(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpUserSel", userIdParameter);
        }
    
        public virtual ObjectResult<SpVerifyUserSel_Result> SpVerifyUserSel(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpVerifyUserSel_Result>("SpVerifyUserSel", emailParameter);
        }
    
        public virtual ObjectResult<SpVerifyEmployeeSel_Result> SpVerifyEmployeeSel(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpVerifyEmployeeSel_Result>("SpVerifyEmployeeSel", emailParameter);
        }
    }
}
